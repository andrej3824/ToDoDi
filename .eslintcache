[{"D:\\programming\\ToDoListDimych\\my-app\\src\\stories\\todolists-api.stories.tsx":"1","D:\\programming\\ToDoListDimych\\my-app\\src\\Todolist.tsx":"2","D:\\programming\\ToDoListDimych\\my-app\\src\\state\\tasks-reducer.ts":"3","D:\\programming\\ToDoListDimych\\my-app\\src\\api\\todolists-api.ts":"4"},{"size":1651,"mtime":1640170334837,"results":"5","hashOfConfig":"6"},{"size":3487,"mtime":1611420546000,"results":"7","hashOfConfig":"6"},{"size":3577,"mtime":1611420546000,"results":"8","hashOfConfig":"6"},{"size":1404,"mtime":1640171764601,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2dp7we",{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\programming\\ToDoListDimych\\my-app\\src\\stories\\todolists-api.stories.tsx",["19","20"],"D:\\programming\\ToDoListDimych\\my-app\\src\\Todolist.tsx",["21","22","23","24","25"],"import React, {useCallback} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {FilterValuesType} from './App';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\programming\\ToDoListDimych\\my-app\\src\\state\\tasks-reducer.ts",["26"],"D:\\programming\\ToDoListDimych\\my-app\\src\\api\\todolists-api.ts",[],{"ruleId":"27","severity":1,"message":"28","line":4,"column":1,"nodeType":"29","endLine":6,"endColumn":2},{"ruleId":"30","severity":1,"message":"31","line":8,"column":7,"nodeType":"32","messageId":"33","endLine":8,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":35,"column":8,"nodeType":"36","endLine":35,"endColumn":33,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"35","line":42,"column":8,"nodeType":"36","endLine":42,"endColumn":45,"suggestions":"38"},{"ruleId":"34","severity":1,"message":"35","line":44,"column":86,"nodeType":"36","endLine":44,"endColumn":116,"suggestions":"39"},{"ruleId":"34","severity":1,"message":"35","line":45,"column":92,"nodeType":"36","endLine":45,"endColumn":122,"suggestions":"40"},{"ruleId":"34","severity":1,"message":"35","line":46,"column":98,"nodeType":"36","endLine":46,"endColumn":128,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":45,"column":53,"nodeType":"44","messageId":"45","endLine":45,"endColumn":55},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'settings' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["46"],["47"],["48"],["49"],["50"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",{"desc":"51","fix":"52"},{"desc":"51","fix":"53"},{"desc":"51","fix":"54"},{"desc":"51","fix":"55"},{"desc":"51","fix":"56"},"Update the dependencies array to be: [props]",{"range":"57","text":"58"},{"range":"59","text":"58"},{"range":"60","text":"58"},{"range":"61","text":"58"},{"range":"62","text":"58"},[1177,1202],"[props]",[1415,1452],[1542,1572],[1666,1696],[1796,1826]]